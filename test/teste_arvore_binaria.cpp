#include "../src/estruturas_encadeadas/ArvoreBinariaBusca.h"
#include "../src/elementos/Aluno.h"
#include "../src/elementos/Funcionario.h"
#include "../src/elementos/Produto.h"
#include "../ConfigLocale.h"
#include <iostream>
#include <memory>

void testarArvoreBinariaBusca() {
    std::cout << "\n" << std::string(70, '=') << std::endl;
    std::cout << "üå≥ TESTANDO ESTRUTURA: √ÅRVORE BIN√ÅRIA DE BUSCA" << std::endl;
    std::cout << std::string(70, '=') << std::endl;
    
    ArvoreBinariaBusca arvore;
    
    std::cout << "\n1. üå± Testando √°rvore vazia:" << std::endl;
    std::cout << "√Årvore vazia? " << (arvore.estaVazia() ? "Sim" : "N√£o") << std::endl;
    std::cout << "Tamanho: " << arvore.getTamanho() << std::endl;
    std::cout << "Altura: " << arvore.calcularAltura() << std::endl;
    
    std::cout << "\n2. üåø Inserindo elementos (organiza√ß√£o por ID):" << std::endl;
    
    // Inserir elementos em ordem n√£o sequencial para testar a estrutura da √°rvore
    auto produto1 = std::make_unique<Produto>(50, "Notebook", "Eletr√¥nicos", "Dell", 2500.0, 10);
    auto aluno1 = std::make_unique<Aluno>(30, "Jo√£o Silva", "Computa√ß√£o", 8.5);
    auto funcionario1 = std::make_unique<Funcionario>(70, "Maria Santos", "Desenvolvedora", "TI", 6000.0);
    auto aluno2 = std::make_unique<Aluno>(20, "Ana Costa", "Engenharia", 9.0);
    auto produto2 = std::make_unique<Produto>(60, "Mouse", "Perif√©ricos", "Logitech", 80.0, 50);
    auto funcionario2 = std::make_unique<Funcionario>(40, "Carlos Lima", "Gerente", "Vendas", 7500.0);
    auto aluno3 = std::make_unique<Aluno>(80, "Pedro Santos", "F√≠sica", 9.2);
    
    std::cout << "Inserindo: Produto (ID=50), Aluno (ID=30), Funcion√°rio (ID=70)" << std::endl;
    std::cout << "           Aluno (ID=20), Produto (ID=60), Funcion√°rio (ID=40), Aluno (ID=80)" << std::endl;
    
    arvore.inserir(std::move(produto1));
    arvore.inserir(std::move(aluno1));
    arvore.inserir(std::move(funcionario1));
    arvore.inserir(std::move(aluno2));
    arvore.inserir(std::move(produto2));
    arvore.inserir(std::move(funcionario2));
    arvore.inserir(std::move(aluno3));
    
    std::cout << "Tamanho ap√≥s inser√ß√µes: " << arvore.getTamanho() << std::endl;
    std::cout << "Altura da √°rvore: " << arvore.calcularAltura() << std::endl;
    
    std::cout << "\n3. üîç Testando busca por ID:" << std::endl;
    long idBusca = 40;
    Elemento* encontrado = arvore.buscarPeloId(idBusca);
    if (encontrado) {
        std::cout << "‚úÖ Elemento encontrado (ID=" << idBusca << "): ";
        encontrado->imprimirInfo();
        std::cout << std::endl;
    } else {
        std::cout << "‚ùå Elemento n√£o encontrado (ID=" << idBusca << ")" << std::endl;
    }
    
    // Buscar elemento inexistente
    idBusca = 999;
    encontrado = arvore.buscarPeloId(idBusca);
    if (encontrado) {
        std::cout << "‚úÖ Elemento encontrado (ID=" << idBusca << ")" << std::endl;
    } else {
        std::cout << "‚ùå Elemento n√£o encontrado (ID=" << idBusca << ") - Esperado!" << std::endl;
    }
    
    std::cout << "\n4. üå≥ Testando percursos da √°rvore:" << std::endl;
    
    std::cout << "\n4.1. üìä Percurso Em Ordem (elementos ordenados por ID):" << std::endl;
    arvore.emOrdem();
    
    std::cout << "\n4.2. üå± Percurso Pr√©-Ordem (ordem de inser√ß√£o/constru√ß√£o):" << std::endl;
    arvore.preOrdem();
    
    std::cout << "\n4.3. üçÇ Percurso P√≥s-Ordem (ordem de libera√ß√£o):" << std::endl;
    arvore.posOrdem();
    
    std::cout << "\n5. üîç Testando elementos extremos:" << std::endl;
    Elemento* minimo = arvore.encontrarMinimo();
    Elemento* maximo = arvore.encontrarMaximo();
    
    if (minimo) {
        std::cout << "üîª Menor elemento (ID=" << minimo->getID() << "): ";
        minimo->imprimirInfo();
        std::cout << std::endl;
    }
    
    if (maximo) {
        std::cout << "üî∫ Maior elemento (ID=" << maximo->getID() << "): ";
        maximo->imprimirInfo();
        std::cout << std::endl;
    }
    
    std::cout << "\n6. ‚ùå Testando remo√ß√£o de elementos:" << std::endl;
    
    // Remover n√≥ folha
    std::cout << "6.1. Removendo n√≥ folha (ID=20):" << std::endl;
    auto removido = arvore.removerPeloId(20);
    if (removido) {
        std::cout << "‚úÖ Elemento removido: ";
        removido->imprimirInfo();
        std::cout << std::endl;
    }
    std::cout << "Tamanho ap√≥s remo√ß√£o: " << arvore.getTamanho() << std::endl;
    
    // Remover n√≥ com um filho
    std::cout << "\n6.2. Removendo n√≥ com um filho (ID=70):" << std::endl;
    removido = arvore.removerPeloId(70);
    if (removido) {
        std::cout << "‚úÖ Elemento removido: ";
        removido->imprimirInfo();
        std::cout << std::endl;
    }
    std::cout << "Tamanho ap√≥s remo√ß√£o: " << arvore.getTamanho() << std::endl;
    
    // Remover n√≥ com dois filhos (raiz)
    std::cout << "\n6.3. Removendo n√≥ com dois filhos (ID=50 - raiz):" << std::endl;
    removido = arvore.removerPeloId(50);
    if (removido) {
        std::cout << "‚úÖ Elemento removido: ";
        removido->imprimirInfo();
        std::cout << std::endl;
    }
    std::cout << "Tamanho ap√≥s remo√ß√£o: " << arvore.getTamanho() << std::endl;
    
    std::cout << "\n7. üå≥ Estado final da √°rvore:" << std::endl;
    std::cout << "Altura: " << arvore.calcularAltura() << " | Tamanho: " << arvore.getTamanho() << std::endl;
    arvore.emOrdem();
    
    std::cout << "\n‚úÖ Teste da √Årvore Bin√°ria de Busca conclu√≠do!" << std::endl;
}

void analisarComplexidades() {
    std::cout << "\n" << std::string(70, '=') << std::endl;
    std::cout << "üìä AN√ÅLISE DE COMPLEXIDADES DA √ÅRVORE BIN√ÅRIA DE BUSCA" << std::endl;
    std::cout << std::string(70, '=') << std::endl;
    
    std::cout << "\nüå≥ √ÅRVORE BIN√ÅRIA DE BUSCA:" << std::endl;
    std::cout << "‚îú‚îÄ inserir()        : O(log n) caso m√©dio, O(n) pior caso" << std::endl;
    std::cout << "‚îú‚îÄ buscarPeloId()   : O(log n) caso m√©dio, O(n) pior caso" << std::endl;
    std::cout << "‚îú‚îÄ removerPeloId()  : O(log n) caso m√©dio, O(n) pior caso" << std::endl;
    std::cout << "‚îú‚îÄ emOrdem()        : O(n) - visita todos os n√≥s" << std::endl;
    std::cout << "‚îú‚îÄ preOrdem()       : O(n) - visita todos os n√≥s" << std::endl;
    std::cout << "‚îú‚îÄ posOrdem()       : O(n) - visita todos os n√≥s" << std::endl;
    std::cout << "‚îú‚îÄ encontrarMinimo(): O(log n) caso m√©dio, O(n) pior caso" << std::endl;
    std::cout << "‚îú‚îÄ encontrarMaximo(): O(log n) caso m√©dio, O(n) pior caso" << std::endl;
    std::cout << "‚îú‚îÄ calcularAltura() : O(n) - percorre todos os n√≥s" << std::endl;
    std::cout << "‚îú‚îÄ estaVazia()      : O(1) - verifica√ß√£o direta" << std::endl;
    std::cout << "‚îî‚îÄ getTamanho()     : O(1) - acesso direto" << std::endl;
    
    std::cout << "\nüéØ CARACTER√çSTICAS DA ABB:" << std::endl;
    std::cout << "‚úÖ Organiza√ß√£o autom√°tica por ID" << std::endl;
    std::cout << "‚úÖ Percurso em ordem produz lista ordenada" << std::endl;
    std::cout << "‚úÖ Busca eficiente em √°rvores balanceadas" << std::endl;
    std::cout << "‚úÖ N√≥s privados garantem encapsulamento" << std::endl;
    std::cout << "‚ö†Ô∏è  Performance degrada em √°rvores desbalanceadas" << std::endl;
    
    std::cout << "\nüîç COMPARA√á√ÉO COM OUTRAS ESTRUTURAS:" << std::endl;
    std::cout << "üìä Lista N√£o Ordenada: Busca O(n), Inser√ß√£o O(1)" << std::endl;
    std::cout << "üìä Lista Ordenada:     Busca O(log n), Inser√ß√£o O(n)" << std::endl;
    std::cout << "üìä ABB Balanceada:     Busca O(log n), Inser√ß√£o O(log n)" << std::endl;
    std::cout << "üìä ABB Desbalanceada:  Busca O(n), Inser√ß√£o O(n)" << std::endl;
}

int main() {
    CONFIGURAR_PORTUGUES();
    
    std::cout << "======================================================================" << std::endl;
    std::cout << "üéØ TESTE DA √ÅRVORE BIN√ÅRIA DE BUSCA" << std::endl;
    std::cout << "Implementa√ß√£o com N√≥s Privados e Organiza√ß√£o por ID" << std::endl;
    std::cout << "======================================================================" << std::endl;
    
    try {
        testarArvoreBinariaBusca();
        analisarComplexidades();
        
        std::cout << "\n" << std::string(70, '=') << std::endl;
        std::cout << "‚úÖ CONCLU√çDA COM SUCESSO!" << std::endl;
        std::cout << "√Årvore Bin√°ria de Busca implementada e testada!" << std::endl;
        std::cout << "üîí Encapsulamento: N√≥s s√£o privados" << std::endl;
        std::cout << "üéØ Organiza√ß√£o: Elementos ordenados por ID" << std::endl;
        std::cout << "‚ö° Efici√™ncia: O(log n) para opera√ß√µes principais" << std::endl;
        std::cout << std::string(70, '=') << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå Erro durante os testes: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}
