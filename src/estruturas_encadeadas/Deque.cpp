#include "Deque.h"
#include "../../ConfigLocale.h"

void Deque::inserirInicio(std::unique_ptr<Elemento> elemento) {
    if (!elemento) {
        return;  // Prote√ß√£o contra elemento nulo
    }
    
    // Inserir no in√≠cio da lista dupla (frente do deque)
    lista.inserirNoInicio(std::move(elemento));
}

void Deque::inserirFim(std::unique_ptr<Elemento> elemento) {
    if (!elemento) {
        return;  // Prote√ß√£o contra elemento nulo
    }
    
    // Inserir no final da lista dupla (final do deque)
    lista.inserirNoFim(std::move(elemento));
}

std::unique_ptr<Elemento> Deque::removerInicio() {
    if (estaVazio()) {
        return nullptr;  // Deque vazio
    }
    
    // Remover do in√≠cio da lista dupla (frente do deque)
    return lista.removerPrimeiro();
}

std::unique_ptr<Elemento> Deque::removerFim() {
    if (estaVazio()) {
        return nullptr;  // Deque vazio
    }
    
    // Remover do final da lista dupla (final do deque)
    // VANTAGEM da lista dupla: remo√ß√£o do final em O(1)!
    return lista.removerUltimo();
}

Elemento* Deque::inicio() const {
    if (estaVazio()) {
        return nullptr;  // Deque vazio
    }
    
    // Buscar o primeiro elemento da lista (frente do deque)
    return lista.getPrimeiro();
}

Elemento* Deque::fim() const {
    if (estaVazio()) {
        return nullptr;  // Deque vazio
    }
    
    // Buscar o √∫ltimo elemento da lista (final do deque)
    return lista.getUltimo();
}

bool Deque::estaVazio() const {
    return lista.getTamanho() == 0;
}

int Deque::getTamanho() const {
    return lista.getTamanho();
}

void Deque::limpar() {
    lista.limpar();
}

void Deque::imprimirDeque() const {
    CONFIGURAR_PORTUGUES();
    
    if (estaVazio()) {
        std::cout << "üì¶ Deque vazio!\n";
        return;
    }
    
    std::cout << "‚¨å Deque (do in√≠cio ao fim):\n";
    std::cout << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    std::cout << "‚îÇ IN√çCIO                         FIM ‚îÇ\n";
    std::cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
    
    // Usar o m√©todo de impress√£o da lista dupla
    lista.imprimirLista();
    
    std::cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n";
    std::cout << "üìä Total de elementos: " << getTamanho() << "\n";
}

void Deque::imprimirDequeReverso() const {
    CONFIGURAR_PORTUGUES();
    
    if (estaVazio()) {
        std::cout << "üì¶ Deque vazio!\n";
        return;
    }
    
    std::cout << "‚¨å Deque (do fim ao in√≠cio - ordem reversa):\n";
    std::cout << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    std::cout << "‚îÇ FIM                         IN√çCIO ‚îÇ\n";
    std::cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
    
    // Usar o m√©todo de impress√£o reversa espec√≠fico da lista dupla
    // VANTAGEM da lista duplamente encadeada!
    lista.imprimirListaReversa();
    
    std::cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n";
    std::cout << "üìä Total de elementos: " << getTamanho() << "\n";
}
